/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: hazelmatthews (https://sketchfab.com/hazelmatthews)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/white-t-shirt-3f98e641831b41ccb1807d0f68cc51dc
title: White T-Shirt
*/

import * as THREE from 'three'
import React, {ForwardedRef, useEffect, useRef} from 'react'
import {Decal, Html, useGLTF, useTexture} from '@react-three/drei'
import {GLTF} from 'three-stdlib'

type GLTFResult = GLTF & {
    nodes: {
        mesh_0: THREE.Mesh
    }
    materials: {
        Default_OBJ: THREE.MeshStandardMaterial
    }
}

interface Props {
    // color: string
    // textureIndex: number
}

export const Model = React.forwardRef((props: Props, ref: ForwardedRef<THREE.Mesh>) => {
//     <button ref={ref} className="FancyButton">
//         {props.children}
//     </button>
// ));
//
// export function Model(props: Props) {
    const textures = useTexture(["/textures/pink-logo.png", "/textures/boards.jpg"])
    const {nodes, materials} = useGLTF('/scene2.gltf') as GLTFResult
    // const texture = useTexture('./texture.jpg')

    // const ref = useRef<THREE.Mesh>(null!)
    useEffect(() => {
        // if (!shirtRef.current) return;
        // // console.log(shirtRef.mesh)
        // ref.current.material.color = new THREE.Color(props.color);
        // ref.current
        // shirtRef.current.material.mustUpdate = true
        // shirtRef.current.material.must_update = true;
        console.log(ref.current.position)
        // console.log("color",props.color)
    }, []);
    console.log(ref)

    return (
        <group dispose={null} position={[0, -2, 0]}>
            <mesh castShadow receiveShadow
                  geometry={nodes.mesh_0.geometry}
                  material={materials.Default_OBJ}
                // material-color={props.color}
                  scale={0.00005}
                  ref={ref}
                // onClick={updateColor}
            >
                <Decal

                    // debug // Makes "bounding box" of the decal visible
                    position={[6700, 11500, 5000]} // Position of the decal
                    rotation={[0, 0, 0]} // Rotation of the decal (can be a vector or a degree in radians)
                    scale={5000} // Scale of the decal
                >

                    <meshStandardMaterial
                        polygonOffset polygonOffsetFactor={-10}
                        // debug
                        // color="red"
                        transparent

                        map={textures[0]}
                    />
                </Decal>
            </mesh>
        </group>
    )
})

useGLTF.preload('/scene2.gltf')
